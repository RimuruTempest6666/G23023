#IT
import math

#Begin1. Дана сторона квадрата a. Найти его периметр P = 4·a
##a = 8
##P = 4 * a
##print('P = ',  P)


#Begin2. Дана сторона квадрата a. Найти его площадь S = a

##print('Введите целое число - сторону квадрата')
##a = int(input())
##S = a * a
##print('S = ', S)


#Begin3.Даны стороны прямоугольника a и b. Найти его площадь S = a·b и периметр P = 2·(a + b)
##print('Введите целые числа - стороны прямоуг')
##a = int(input())
##b = int(input())
##S = a*b
##P = 2*(a + b)
##print('S = ', S)
##print('P = ', P)


#Begin4.Дан диаметр окружности d. Найти ее длину L = π·d. В качестве значения π использовать 3.14.
##print('Введите целое число')
##d = int(input())                               
##L = 3.14*d
##print('L = ', L)


#Begin5.Дана длина ребра куба a. Найти объем куба V = a3 и площадь его поверхности S = 6·a2
##print('Введите целое число')
##a = int(input())
##V = a*a*a
##S = 6*a*a
##print('V = ', V)
##print('S = ', S)


#Begin6.Даны длины ребер a, b, c прямоугольного параллелепипеда. Найти его объем V = a·b·c и площадь поверхности S = 2·(a·b + b·c + a·c).
##print('Введите целое число')
##a = int(input())
##b = int(input())
##c = int(input())
##V = a*b*c
##S = 2*(a*b + b*c + a*c)
##print('V = ', V)
##print('S = ', S)


#Begin7.Найти длину окружности L и площадь круга S заданного радиуса R:L = 2·π·R, S = π·R2
##print('Введите целое число')
##R = int(input())
##L = 3.14*R*2
##S = 3.14* R**2
##print('S = ', S)
##print('L = ', L)



#Begin8.Даны два числа a и b. Найти их среднее арифметическое: (a + b)/2.
##print('Введите целое число')
##a = int(input())
##b = int(input())
##M = (a + b)/2
##print('M = ', M)


#Begin9.Даны два неотрицательных числа a и b. Найти их среднее геометрическое, то есть квадратный корень из их произведения: √a·b.
##print('Введите целое число')
##a = int(input())
##b = int(input())
##c = math.sqrt(a*b)
##print('c = ', c)


#Begin10.Даны два ненулевых числа. Найти сумму, разность, произведение и частное их квадратов.
##print('Введите целое число')
##a = int(input())
##b = int(input())
##c = a+b
##k = a-b
##g = a*b
##h = a**2/b**2
##print('c = ', c)
##print('k = ', k)
##print('g = ', g)
##print('h = ', h)


#Begin11.Даны два ненулевых числа. Найти сумму, разность, произведение и частное их модулей.
##a = int(input())
##b = int(input())
##math.fabs(a)
##c = math.fabs(a) +math.fabs(b)
##k =math.fabs(a) -math.fabs(b)
##g =math.fabs(a) *math.fabs(b)
##h =math.fabs(a) /math.fabs(b)
##print('c = ', c)
##print('k = ', k)
##print('g = ', g)
##print('h = ', h)


#Begin12.Даны катеты прямоугольного треугольника a и b. Найти его гипотенузу c и периметр P:c =√a2 + b2, P = a + b + c.
##a = int(input())
##b = int(input())
##c =math.sqrt(a**2+b**2)
##P = a + b + c
##print('c = ', c)
##print('P = ', P)


#Begin13.Даны два круга с общим центром и радиусами R1 и R2 (R1 > R2).Найти площади этих кругов S1 и S2, а также площадь S3 кольца, внешний радиус которого равен R1,
#а внутренний радиус равен R2:S1 = π·(R1)2, S2 = π·(R2)2, S3 = S1 - S2.
##R1 = int(input())
##R2 = int(input())
##S1 = 3.14*R1*2
##S2 = 3.14*R2*2
##S3 = S1 - S2
##print('S1 = ', S1)
##print('S2 = ', S2)
##print('S3 = ', S3)


#Begin14◦. Дана длина L окружности. Найти ее радиус R и площадь S круга, ограниченного этой окружностью, учитывая, что L = 2·π·R, S = π·R2. В качестве значения π использовать 3.14.
#L = int(input())
#R = L/(3.14*2)
#S = 3.14*R**2
#print('R = ', R)
#print('S = ', S)


#Begin15◦. Дана площадь S круга. Найти его диаметр D и длину L окружности, ограничивающей этот круг, учитывая, что L = 2·π·R, S = π·R2. В качестве значения π использовать 3.14.
#S = int(input())
#D = math.sqrt((4*S)/3.14)
#L = D*3.14
#print('D = ', D)
#print('L = ', L)


#Begin16◦. Найти расстояние между двумя точками с заданными координата- ми x1 и x2 на числовой оси: |x2 − x1|.
#x1 = int(input())
#x2 = int(input())
#C = math.fabs(x1-x2)
#print('C = ', C)


#Begin17◦. Даны три точки A, B, C на числовой оси. Найти длины отрезков AC и BC и их сумму.
#A = int(input())
#B = int(input())
#C = int(input())
#G = math.fabs(A-C)+math.fabs(B-C)
#print('G = ', G)


#Begin18◦. Даны три точки A, B, C на числовой оси. Точка C расположена между точками A и B. Найти произведение длин отрезков AC и BC.
#print('Точка C расположена между точками A и B.')
#A = int(input())
#B = int(input())
#C = int(input())
#if A<C<B or A>C>B:
#        G = math.fabs(A-C)*math.fabs(B-C)
#        print('G = ', G)
#else: print('Читать научись!!')

#Begin19◦. Даны координаты двух противоположных вершин прямоугольника: (x1, y1), (x2, y2). Стороны прямоугольника параллельны осям координат. Найти периметр и площадь данного прямоугольника.
#x1 = int(input())
#y1 = int(input())
#x2 = int(input())
#y2 = int(input())
#L = math.fabs(x2-x1)
#W = math.fabs(y2-y1)
#P = (L+W)*2
#S = L*W
#print('P = ', P)
#print('S = ', S)


#Begin20◦. Найти расстояние между двумя точками с заданными координатами (x1, y1) и (x2, y2) на плоскости. Расстояние вычисляется по формуле √(x2 − x1)2 + (y2 − y1)2.
#x1 = int(input())
#y1 = int(input())
#x2 = int(input())
#y2 = int(input())
#C = math.sqrt(math.fabs(x2-x1)**2+math.fabs(y2-y1)**2)
#print('C = ', C)


#Begin21◦. Даны координаты трех вершин треугольника: (x1, y1), (x2, y2), (x3, y3).Найти его периметр и площадь, используя формулу для расстояния между двумя точками на плоскости (см. задание Begin20). Для нахождения площади треугольника со сторонами a, b, c использовать формулу Герона: S = √p·(p − a)·(p − b)·(p − c),где p = (a + b + c)/2 — полупериметр.
#x1 = int(input())
#y1 = int(input())
#x2 = int(input())
#y2 = int(input())
#x3 = int(input())
#y3 = int(input())
#a = math.sqrt(math.fabs(x2-x1)**2+math.fabs(y2-y1)**2)
#b = math.sqrt(math.fabs(x3-x2)**2+math.fabs(y3-y2)**2)
#c = math.sqrt(math.fabs(x1-x3)**2+math.fabs(y1-y3)**2)
#p = (a + b + c)/2
#S = math.sqrt(p*(p-a)*(p-b)*(p-c))
#print('a = ', a)
#print('b = ', b)
#print('c = ', c)
#print('S = ', S)


#Bonus kalculator
#while True: print(eval(input('>>>')))


#Begin22.Поменять местами содержимое переменных A и B и вывести новые значения A и B.
##A = int(input())
##B = int(input())
##C = A
##A = B
##B = C
##print('A = ', A)
##print('B = ', B)


#Begin23.Даны переменные A, B, C. Изменить их значения, переместив содержимое A в B, B — в C, C — в A, и вывести новые значения переменных A,B, C.

##A = int(input())
##B = int(input())
##C = int(input())
##G = A
##A = B
##B = C
##C = G
##print('A = ', A)
##print('B = ', B)
##print('C = ', C)


#Begin24.Даны переменные A, B, C. Изменить их значения, переместив содержимое A в C, C — в B, B — в A, и вывести новые значения переменных A,B, C.
##A = int(input())
##B = int(input())
##C = int(input())
##G = A
##A = C
##C = B
##B = G
##print('A = ', A)
##print('B = ', B)
##print('C = ', C)


#Begin25.Найти значение функции y = 3x6 − 6x2 − 7 при данном значении x
##x = int(input())
##y = 3*x**6-6*x**2-7
##print('y = ', y)


#Begin26.Найти значение функции y = 4(x−3)6 − 7(x−3)3 + 2 при данном значении x.
##x = int(input())
##y = 4*(x-3)**6-7*(x-3)**3 + 2
##print('y = ', y)


#Begin27.Дано число A. Вычислить A8, используя вспомогательную переменную и три операции умножения. Для этого последовательно находить A2,A4, A8. Вывести все найденные степени числа A.
##A = int(input())
##G = A**2
##H = G**2
##J = H**2
##print('G = ', G)
##print('H = ', H)
##print('J = ', J)


#Begin28.Дано число A. Вычислить A15, используя две вспомогательные переменные и пять операций умножения. Для этого последовательно находить A2, A3, A5, A10, A15. Вывести все найденные степени числа A.
##A = int(input())
##G = A**2
##H = A**3
##J = A**5
##K = A**10
##L = A**15
##print('G = ', G)
##print('H = ', H)
##print('J = ', J)
##print('K = ', K)
##print('L = ', L)


#Begin29.Дано значение угла α в градусах (0 < α < 360). Определить значение этого же угла в радианах, учитывая, что 180◦ = π радианов. В качестве значения π использовать 3.14.
##print('0<a<360')
##a = int(input())
##if 0<a<360:
##    F = a*(3.14/180)
##    print('F = ', F)
##else:
##    print('Читать научись!!')


#Begin30.Дано значение угла α в радианах (0 < α < 2·π). Определить значениеэтого же угла в градусах, учитывая, что 180◦ = π радианов. В качестве значения π использовать 3.14.
##print('0<a<6.28')
##a = int(input())
##if 0<a<6.28:
##    F = a/(3.14/180)
##    print('F = ', F)
##else:
##    print('Читать научись!!')


#Begin31.Дано значение температуры T в градусах Фаренгейта. Определить значение этой же температуры в градусах Цельсия. Температура по Цельсию Tc и температура по Фаренгейту Tf связаны следующим соотношением:Tc = (Tf − 32)·5/9.
##Tf = int(input())
##Tc = (Tf-32)*(5/9)
##print('Tc = ', Tc)


#Begin32.Дано значение температуры T в градусах Цельсия. Определить значение этой же температуры в градусах Фаренгейта. Температура по Цельсию Tc и температура по Фаренгейту Tf связаны следующим соотношением:Tc = (Tf − 32)·5/9.
##Tc = int(input())
##Tf = Tc/(5/9)+32
##print('Tf = ', Tf)


#Integer1.Дано расстояние L в сантиметрах. Используя операцию деления нацело, найти количество полных метров в нем (1 метр = 100 см).

##L = int(input("Введите кол-во см "))
##meters = L//100
##print('Полных метров ', meters)


#Integer2.Дана масса M в килограммах. Используя операцию деления нацело,найти количество полных тонн в ней (1 тонна = 1000 кг).
##M = int(input("Введите кол-во  "))
##T = M//1000
##print('T = ', T)


#Integer3.Дан размер файла в байтах. Используя операцию деления нацело, найти количество полных килобайтов, которые занимает данный файл(1 килобайт = 1024 байта).
##M = int(input("Введите кол-во  "))
##T = M//1024
##print('T = ', T)


#Integer4.Даны целые положительные числа A и B (A > B). На отрезке длины A размещено максимально возможное количество отрезков длины B(без наложений). Используя операцию деления нацело, найти количество отрезков B, размещенных на отрезке A.
##A = int(input("A = "))
##B = int(input("B = "))
##if A>B:
##    T = A//B
##    print('T = ', T)
##else:
##     print('Net')   


#Integer5.Даны целые положительные числа A и B (A > B). На отрезке длины A размещено максимально возможное количество отрезков длины B (без наложений). Используя операцию взятия остатка от деления нацело, найти длину незанятой части отрезка A.

##A = int(input("A = "))
##B = int(input("B = "))
##if A>B:
##    T = A%B
##    print('T = ', T)
##else:
##     print('Net')  


#Integer6◦Дано двузначное число. Вывести вначале его левую цифру (десятки), а затем — его правую цифру (единицы). Для нахождения десятков использовать операцию деления нацело, для нахождения единиц — операцию взятия остатка от деления
##N = int(input("N = "))
##if 9<N<100:
##    digit10 = N//10
##    digit1 = N%10
##    print('digit10 = ',digit10 )
##    print('digit1 = ',digit1 )
##else:
##    print('Net')


#дано трехзначное число. его цифры по отдельности
##N = int(input("N = "))
##if 99<N<1000:
##    digit1 = N%10
##    print('digit1 = ',digit1 )
##    N = N//10
##    digit10 = N%10
##    print('digit10 = ',digit10 )
##    N = N//10
##    digit100 = N%10
##    print('digit100 = ',digit100 )
##    N = N//10
##else:
##    print('Net')


#Integer7.Дано двузначное число. Найти сумму и произведение его цифр.
##N = int(input("N = "))
##if 9<N<100:
##    d1 = N%10
##    N = N//10
##    d10 = N%10
##    T = d1+d10
##    G = d1*d10
##    print('T = ', T)
##    print('G = ', G)
##else:
##    print('Net')


#Integer8.Дано двузначное число. Вывести число, полученное при перестановке цифр исходного числа.

##N = int(input("N = "))
##if 9<N<100:
##    d1 = N%10
##    N = N//10
##    d10 = N%10
##    T = d1*10+d10
##    print('T = ', T)
##else:
##    print('Net')


#Integer9◦Дано трехзначное число. Используя одну операцию деления нацело,вывести первую цифру данного числа (сотни).
##N = int(input("N = "))
##if 99<N<1000:
##    T = N//100
##    print('T = ', T)
##else:
##    print('Net')


#Integer10◦Дано трехзначное число. Вывести вначале его последнюю цифру(единицы), а затем — его среднюю цифру (десятки).
##N = int(input("N = "))
##if 99<N<1000:
##    digit1 = N%10
##    print('digit1 = ',digit1 )
##    N = N//10
##    digit10 = N%10
##    print('digit10 = ',digit10 )
##else:
##    print('Net')


#Integer11◦Дано трехзначное число. Найти сумму и произведение его цифр.

##N = int(input("N = "))
##if 99<N<1000:
##    d1 = N%10
##    N = N//10
##    d10 = N%10
##    N = N//10
##    d100 = N%10
##    T = d1+d10+d100
##    G = d1*d10*d100
##    print('T = ', T)
##    print('G = ', G)
##else:
##    print('Net')


#Integer12.Дано трехзначное число. Вывести число, полученное при прочтении исходного числа справа налево.
##N = int(input("N = "))
##if 99<N<1000:
##    d1 = N%10
##    N = N//10
##    d10 = N%10
##    N = N//10
##    d100 = N%10
##    T = d100+d10*10+d1*100
##    print('T = ', T)
##else:
##    print('Net')


#Integer13◦Дано трехзначное число. В нем зачеркнули первую слева цифру и приписали ее справа. Вывести полученное число.
##N = int(input("N = "))
##if 99<N<1000:
##    d1 = N%10
##    N = N//10
##    d10 = N%10
##    N = N//10
##    d100 = N%10
##    T = d10*100+d1*10+d100
##    print('T = ', T)
##else:
##    print('Net')


#Integer14◦Дано трехзначное число. В нем зачеркнули первую справа цифру и приписали ее слева. Вывести полученное число
##N = int(input("N = "))
##if 99<N<1000:
##    d1 = N%10
##    N = N//10
##    d10 = N%10
##    N = N//10
##    d100 = N%10
##    T = d1*100+d100*10+d10
##    print('T = ', T)
##else:
##    print('Net')


#Integer15◦Дано трехзначное число. Вывести число, полученное при перестановке цифр сотен и десятков исходного числа (например, 123 перейдет в 213).
##N = int(input("N = "))
##if 99<N<1000:
##    d1 = N%10
##    N = N//10
##    d10 = N%10
##    N = N//10
##    d100 = N%10
##    T = d10*100+d100*10+d1
##    print('T = ', T)
##else:
##    print('Net')


#Integer16◦Дано трехзначное число. Вывести число, полученное при перестановке цифр десятков и единиц исходного числа (например, 123 перейдет в 132).

##N = int(input("N = "))
##if 99<N<1000:
##    d1 = N%10
##    N = N//10
##    d10 = N%10
##    N = N//10
##    d100 = N%10
##    T = d100*100+d1*10+d10
##    print('T = ', T)
##else:
##    print('Net')


#Integer17◦Дано целое число, большее 999. Используя одну операцию деления нацело и одну операцию взятия остатка от деления, найти цифру,соответствующую разряду сотен в записи этого числа
##N = int(input("N = "))
##if 999<N:
##    H = N//100
##    T = H%10
##    print('T = ', T)
##else:
##    print('Net')


#Integer18◦Дано целое число, большее 999. Используя одну операцию деления нацело и одну операцию взятия остатка от деления, найти цифру,соответствующую разряду тысяч в записи этого числа.
##N = int(input("N = "))
##if 999<N:
##    H = N//1000
##    T = H%10
##    print('T = ', T)
##else:
##    print('Net')


#Дележ яблок - n школьников делят k яблок поровну, неделящийся остаток остается в корзинке. Сколько яблок достанется каждому школьнику? Входные данные: Программа получает на вход числа n и k  - целые, положительные, не превышают 10000. Выходные данные: Выведите ответ на задачу.
#n = int(input("n = "))
#k = int(input("k = "))
#if n<10000 and k<10000:
#    T = k//n
#    print('T = ', T)
#else:
#    print('Net')


#Дележ яблок - n школьников делят k яблок поровну, неделящийся остаток остается в корзинке. Сколько яблок останется в корзинке? Входные данные: Программа получает на вход числа n и k  - целые, положительные, не превышают 10000. Выходные данные: Выведите ответ на задачу.
#n = int(input("n = "))
#k = int(input("k = "))
#if n<10000 and k<10000:
#    T = k%n
#    print('T = ', T)
#else:
#    print('Net')


#Сумма цифр - Дано трехзначное число. Найдите сумму его цифр.Входные данные: Вводится целое положительное число. Гарантируется, что оно соответствует условию задачи.Выходные данные: Выведите ответ на задачу.
##N = int(input("N = "))
##if 99<N<1000:
##    d1 = N%10
##    N = N//10
##    d10 = N%10
##    N = N//10
##    d100 = N%10
##    T = d1 + d10 + d100
##    print('T = ', T)
##else:
##    print('Net')


#Integer19.С начала суток прошло N секунд (N — целое). Найти количествополных минут, прошедших с начала суток.

##N = int(input("N = "))
##T = N//60
##print('T = ', T)


#Integer20◦С начала суток прошло N секунд (N — целое). Найти количество полных часов, прошедших с начала суток.

##N = int(input("N = "))
##T = N//3600
##print('T = ', T)


#Integer21◦С начала суток прошло N секунд (N — целое). Найти количество секунд, прошедших с начала последней минуты.
##N = int(input("N = "))
##T = N%60
##print('T = ', T)


#Integer22◦С начала суток прошло N секунд (N — целое). Найти количество секунд, прошедших с начала последнего часа.
##N = int(input("N = "))
##T = N%3600
##print('T = ', T)


#Integer23◦С начала суток прошло N секунд (N — целое). Найти количество полных минут, прошедших с начала последнего часа
##N = int(input("N = "))
##T1 = N//60
##T = T1%60
##print('T = ', T)


#Integer24◦Дни недели пронумерованы следующим образом: 1 — воскресенье,2 — понедельник, 3 — вторник, . . . , 7 — суббота. Дано целое число K,лежащее в диапазоне 1–365. Определить номер дня недели для K-го дня года, если известно, что в этом году 1 января было понедельником.
##K = int(input("K = "))
##if 0<K<366:
##    ne nado 24-28


#Integer29◦Даны целые положительные числа A, B, C. На прямоугольнике размера A × B размещено максимально возможное количество квадратов со стороной C (без наложений). Найти количество квадратов, размещенных на прямоугольнике, а также площадь незанятой части прямоугольника.

##A = int(input("A = "))
##B = int(input("B = "))
##C = int(input("C = "))
##J = A//C
##G = B//C
##K = J*G
##N = A*B
##U = C*C
##T = N-U
##print('K = ', K)
##print('T = ', T)


#Integer30◦Дан номер некоторого года (целое положительное число). Определить соответствующий ему номер столетия, учитывая, что, к примеру,началом 20 столетия был 1901 год.
#N = int(input("N = "))
#if N>0:
#    d100 = N//100
#    H = N%10
#    if H>0:
#        T = d100 + 1
#        print('T = ', T)
#    else:
#        T = d100
#        print('T = ', T)
#else:
#    print('Net')
    


#Boolean1◦. Дано целое число A. Проверить истинность высказывания: «Число A является положительным».
##A = int(input("A = "))
##res = A>0
##print(res)

#Boolean2◦. Дано целое число A. Проверить истинность высказывания: «Число A является нечетным».
##A = int(input("A = "))
##if A%2 == 1 :
##    print('True')
##else:
##   print('False')

##A = int(input("A = "))
##res = A%2 == 1
##print(res)


#Boolean3◦. Дано целое число A. Проверить истинность высказывания: «Число A является четным».
##A = int(input("A = "))
##if A%2 == 0 :
##    print('True')
##else:
##   print('False')

##A = int(input("A = "))
##res = A%2 == 0
##print(res)


#Boolean4◦. Даны два целых числа: A, B. Проверить истинность высказывания: «Справедливы неравенства A > 2 и B ≤ 3».
#A = int(input("A = "))
#B = int(input("B = "))
#if A>2 and B<=3:
#    print('True')
#else:
#   print('False')

##A = int(input("A = "))
##B = int(input("B = "))
##res = A>2 and B<=3
##print(res)


#Boolean5◦. Даны два целых числа: A, B. Проверить истинность высказывания: «Справедливы неравенства A ≥ 0 или B < −2».
#A = int(input("A = "))
#B = int(input("B = "))
#if A>=0 and B<-2:
#    print('True')
#else:
#   print('False')

##A = int(input("A = "))
##B = int(input("B = "))
##res = A>=0 and B<-2
##print(res)


#Boolean6◦. Даны три целых числа: A, B, C. Проверить истинность высказы- вания: «Справедливо двойное неравенство A < B < C».
#A = int(input("A = "))
#B = int(input("B = "))
#C = int(input("C = "))
#if A<B<C:
#    print('True')
#else:
#   print('False')

##A = int(input("A = "))
##B = int(input("B = "))
##C = int(input("C = "))
##res = A < B < C
##print(res)


#Boolean7◦. Даны три целых числа: A, B, C. Проверить истинность высказы- вания: «Число B находится между числами A и C».
#A = int(input("A = "))
#B = int(input("B = "))
#C = int(input("C = "))
#if A<B<C or A>B>C:
#    print('True')
#else:
#   print('False')

##A = int(input("A = "))
##B = int(input("B = "))
##C = int(input("C = "))
##res = A < B < C or A>B>C
##print(res)


#Boolean8◦. Даны два целых числа: A, B. Проверить истинность высказывания: «Каждое из чисел A и B нечетное».
#A = int(input("A = "))
#B = int(input("B = "))
#if A%2 == 1 and B%2 == 1:
#    print('True')
#else:
#   print('False')

##A = int(input("A = "))
##B = int(input("B = "))
##res = A%2 == 1 and B%2 == 1
##print(res)

#Boolean9◦. Даны два целых числа: A, B. Проверить истинность высказывания: «Хотя бы одно из чисел A и B нечетное».
#A = int(input("A = "))
#B = int(input("B = "))
#if A%2 == 1 or B%2 == 1:
#    print('True')
#else:
#   print('False')

##A = int(input("A = "))
##B = int(input("B = "))
##res = A%2 == 1 or B%2 == 1
##print(res)


#Boolean10◦. Даны два целых числа: A, B. Проверить истинность высказывания: «Ровно одно из чисел A и B нечетное».
#A = int(input("A = "))
#B = int(input("B = "))
#if A%2 == 1 and B%2 == 0 or A%2 == 0 and B%2 == 1:
#    print('True')
#else:
#   print('False')

##A = int(input("A = "))
##B = int(input("B = "))
##res = A%2 == 1 and B%2 == 0 or A%2 == 0 and B%2 == 1
##print(res)


#Boolean11◦. Даны два целых числа: A, B. Проверить истинность высказывания: «Числа A и B имеют одинаковую четность».
#A = int(input("A = "))
#B = int(input("B = "))
#if A%2 == 1 and B%2 == 1 or A%2 == 0 and B%2 == 0:
#    print('True')
#else:
#   print('False')

##A = int(input("A = "))
##B = int(input("B = "))
##res = A%2 == 1 and B%2 == 1 or A%2 == 0 and B%2 == 0
##print(res)


#Boolean12◦. Даны три целых числа: A, B, C. Проверить истинность высказывания: «Каждое из чисел A, B, C положительное».
#A = int(input("A = "))
#B = int(input("B = "))
#C = int(input("C = "))
#if A>0 and B>0 and C>0:
#    print('True')
#else:
#   print('False')

##A = int(input("A = "))
##B = int(input("B = "))
##C = int(input("C = "))
##res = A>0 and B>0 and C>0
##print(res)

#Boolean13◦. Даны три целых числа: A, B, C. Проверить истинность высказывания: «Хотя бы одно из чисел A, B, C положительное».
#A = int(input("A = "))
#B = int(input("B = "))
#C = int(input("C = "))
#if A>0 or B>0 or C>0:
#    print('True')
#else:
#   print('False')

##A = int(input("A = "))
##B = int(input("B = "))
##C = int(input("C = "))
##res = A>0 or B>0 or C>0
##print(res)


#Boolean14◦. Даны три целых числа: A, B, C. Проверить истинность высказывания: «Ровно одно из чисел A, B, C положительное».
#A = int(input("A = "))
#B = int(input("B = "))
#C = int(input("C = "))
#if A>0 and B<0 and C<0 or A<0 and B>0 and C<0 or A<0 and B<0 and C>0:
#    print('True')
#else:
#   print('False')

##A = int(input("A = "))
##B = int(input("B = "))
##C = int(input("C = "))
##res = A>0 and B<0 and C<0 or A<0 and B>0 and C<0 or A<0 and B<0 and C>0
##print(res)


#Boolean15◦. Даны три целых числа: A, B, C. Проверить истинность высказывания: «Ровно два из чисел A, B, C являются положительными».
#A = int(input("A = "))
#B = int(input("B = "))
#C = int(input("C = "))
#if A>0 and B>0 and C<0 or A>0 and B>0 and C>0 or A<0 and B>0 and C>0:
#    print('True')
#else:
#   print('False')

##A = int(input("A = "))
##B = int(input("B = "))
##C = int(input("C = "))
##res = A>0 and B>0 and C<0 or A>0 and B>0 and C>0 or A<0 and B>0 and C>0
##print(res)


#Boolean16◦. Дано целое положительное число. Проверить истинность высказывания: «Данное число является четным двузначным».
#A = int(input("A = "))
#if A%2 == 0 and A//100 == 0:
#    print('True')
#else:
#   print('False')

##A = int(input("A = "))
##res = A%2 == 0 and A//100 == 0
##print(res)


#Boolean17◦. Дано целое положительное число. Проверить истинность высказывания: «Данное число является нечетным трехзначным».
#A = int(input("A = "))
#if A%2 == 1 and A//1000 == 0:
#    print('True')
#else:
#   print('False')

##A = int(input("A = "))
##res = A%2 == 1 and A//1000 == 0
##print(res)


#Boolean18◦. Проверить истинность высказывания: «Среди трех данных целых чисел есть хотя бы одна пара совпадающих».
#A = int(input("A = "))
#B = int(input("B = "))
#C = int(input("C = "))
#if A==B or A==C or B==C:
#    print('True')
#else:
#   print('False')

##A = int(input("A = "))
##B = int(input("B = "))
##C = int(input("C = "))
##res = A==B or A==C or B==C
##print(res)


#Boolean19◦. Проверить истинность высказывания: «Среди трех данных целых чисел есть хотя бы одна пара взаимно противоположных».
#A = int(input("A = "))
#B = int(input("B = "))
#C = int(input("C = "))
#if A==-B or A==-C or B==-C:
#    print('True')
#else:
#   print('False')

##A = int(input("A = "))
##B = int(input("B = "))
##C = int(input("C = "))
##res = A==-B or A==-C or B==-C
##print(res)


#Boolean20◦. Дано трехзначное число. Проверить истинность высказывания: «Все цифры данного числа различны».
#A = int(input("A = "))
#d1 = A%10
#A= A//10
#d10 = A%10
#A = A//10
#d100 = A%10
#if -1000<A<1000 and d1 != d10 != d100:
#    print('True')
#else:
#   print('False')

##A = int(input("A = "))
##d1 = A%10
##A= A//10
##d10 = A%10
##A = A//10
##d100 = A%10
##res = -1000<A<1000 and d1 != d10 != d100
##print(res)


#Boolean21◦. Дано трехзначное число. Проверить истинность высказывания: «Цифры данного числа образуют возрастающую последовательность».
#A = int(input("A = "))
#d1 = A%10
#A= A//10
#d10 = A%10
#A = A//10
#d100 = A%10
#if -1000<A<1000 and d1 > d10 > d100:
#    print('True')
#else:
#   print('False')

##A = int(input("A = "))
##d1 = A%10
##A= A//10
##d10 = A%10
##A = A//10
##d100 = A%10
##res = -1000<A<1000 and d1 > d10 > d100
##print(res)


#Boolean22◦. Дано трехзначное число. Проверить истинность высказывания: «Цифры данного числа образуют возрастающую или убывающую последовательность».
#A = int(input("A = "))
#d1 = A%10
#A= A//10
#d10 = A%10
#A = A//10
#d100 = A%10
#if -1000<A<1000 and d1 < d10 < d100 or -1000<A<1000 and d1 > d10 >d100:
#    print('True')
#else:
#   print('False')

##A = int(input("A = "))
##d1 = A%10
##A= A//10
##d10 = A%10
##A = A//10
##d100 = A%10
##res = -1000<A<1000 and d1 < d10 < d100 or -1000<A<1000 and d1 > d10 >d100
##print(res)


#Boolean23◦. Дано четырехзначное число. Проверить истинность высказывания: «Данное число читается одинаково слева направо и справа налево».
#A = int(input("A = "))
#d1 = A%10
#A= A//10
#d10 = A%10
#A = A//10
#d100 = A%10
#A= A//10
#d1000 = A%10
#if -10000<A<10000 and d1 == d1000 and d10 == d100:
#    print('True')
#else:
#   print('False')

##A = int(input("A = "))
##d1 = A%10
##A= A//10
##d10 = A%10
##A = A//10
##d100 = A%10
##A= A//10
##d1000 = A%10
##res = -10000<A<10000 and d1 == d1000 and d10 == d100
##print(res)



#Boolean24◦. Даны числа A, B, C (число A не равно 0). Рассмотрев дискриминант D = B2 − 4·A·C, проверить истинность высказывания: «Квадратное уравнение A·x2 + B·x + C = 0 имеет вещественные корни».
#A = int(input("A = "))
#B = int(input("B = "))
#C = int(input("C = "))
#if A != 0:
#    D = B**2 - 4*A*C
#    if D>=0:
#        print('True')
#    else:
#        print('False')
#else:
#    print('False')

##A = int(input("A = "))
##B = int(input("B = "))
##C = int(input("C = "))
##if A != 0:
##    D = B**2 - 4*A*C
##    res = D>=0
##    print(res)
##else:
##    print('Nada A>0 or A<0')


#Boolean25◦. Даны числа x, y. Проверить истинность высказывания: «Точка с координатами (x, y) лежит во второй координатной четверти».
#x = int(input("x = "))
#y = int(input("y = "))
#if x<0 and y>0:
#    print('True')
#else:
#   print('False')

##x = int(input("x = "))
##y = int(input("y = "))
##res = x<0 and y>0
##print(res)


#Boolean26◦. Даны числа x, y. Проверить истинность высказывания: «Точка с координатами (x, y) лежит в четвертой координатной четверти»
#x = int(input("x = "))
#y = int(input("y = "))
#if x>0 and y<0:
#    print('True')
#else:
#   print('False')

##x = int(input("x = "))
##y = int(input("y = "))
##res = x>0 and y<0
##print(res)


#Boolean27◦. Даны числа x, y. Проверить истинность высказывания: «Точка с координатами (x, y) лежит во второй или третьей координатной четверти».
#x = int(input("x = "))
#y = int(input("y = "))
#if x<0 and y != 0:
#    print('True')
#else:
#   print('False')

##x = int(input("x = "))
##y = int(input("y = "))
##res = x<0 and y != 0
##print(res)


#Boolean28◦. Даны числа x, y. Проверить истинность высказывания: «Точка с координатами (x, y) лежит в первой или третьей координатной четверти».
#x = int(input("x = "))
#y = int(input("y = "))
#if x>0 and y>0 or x<0 and y<0:
#    print('True')
#else:
#   print('False')

##x = int(input("x = "))
##y = int(input("y = "))
##res = x>0 and y>0 or x<0 and y<0
##print(res)



#Boolean29◦Даны числа x, y, x1, y1, x2, y2. Проверить истинность высказывания: «Точка с координатами (x, y) лежит внутри прямоугольника, левая верхняя вершина которого имеет координаты (x1, y1), правая нижняя —(x2, y2), а стороны параллельны координатным осям».
#x = int(input("x = "))
#y = int(input("y = "))
#x1 = int(input("x1 = "))
#y1 = int(input("y1 = "))
#x2 = int(input("x2 = "))
#y2 = int(input("y2 = "))
#if x1<x<x2 and y1<y<y2 or x1>x>x2 and y1<y<y2 or x1<x<x2 and y1>y>y2 or x1>x>x2 and y1>y>y2:
#    print('True')
#else:
#   print('False')

##x = int(input("x = "))
##y = int(input("y = "))
##x1 = int(input("x1 = "))
##y1 = int(input("y1 = "))
##x2 = int(input("x2 = "))
##y2 = int(input("y2 = "))
##res = x1<x<x2 and y1<y<y2 or x1>x>x2 and y1<y<y2 or x1<x<x2 and y1>y>y2 or x1>x>x2 and y1>y>y2
##print(res)


#Boolean30◦. Даны целые числа a, b, c, являющиеся сторонами некоторого треугольника. Проверить истинность высказывания: «Треугольник со сторонами a, b, c является равносторонним».
##A = int(input("A = "))
##B = int(input("B = "))
##C = int(input("C = "))
##if A==B==C:
##    print('True')
##else:
##   print('False')

##A = int(input("A = "))
##B = int(input("B = "))
##C = int(input("C = "))
##res = A==B==C
##print(res)


###Boolean31◦. Даны целые числа a, b, c, являющиеся сторонами некоторого треугольника. Проверить истинность высказывания: «Треугольник со сторонами a, b, c является равнобедренным».
##A = int(input("A = "))
##B = int(input("B = "))
##C = int(input("C = "))
##if A == B != C or A == C != B or C == B != A:
##    print('True')
##else:
##   print('False')

##A = int(input("A = "))
##B = int(input("B = "))
##C = int(input("C = "))
##res = A == B != C or A == C != B or C == B != A
##print(res)


###Boolean32◦. Даны целые числа a, b, c, являющиеся сторонами некоторого треугольника. Проверить истинность высказывания: «Треугольник со сторонами a, b, c является прямоугольным».
##A = int(input("A = "))
##B = int(input("B = "))
##C = int(input("C = "))
##if A = math.sqrt(B**2 + C**2) or B = math.sqrt(A**2 + C**2) or C = math.sqrt(B**2 + A**2):
##    print('True')
##else:
##   print('False')

##A = int(input("A = "))
##B = int(input("B = "))
##C = int(input("C = "))
##res = A == math.sqrt(B**2 + C**2) or B == math.sqrt(A**2 + C**2) or C == math.sqrt(B**2 + A**2)
##print(res)


###Boolean33◦. Даны целые числа a, b, c. Проверить истинность высказывания:«Существует треугольник со сторонами a, b, c».
##A = int(input("A = "))
##B = int(input("B = "))
##C = int(input("C = "))
##if A+B > C and A+C > B and C+B > A:
##    print('True')
##else:
##   print('False')

##A = int(input("A = "))
##B = int(input("B = "))
##C = int(input("C = "))
##res = A+B > C and A+C > B and C+B > A
##print(res)


###Boolean34◦. Даны координаты поля шахматной доски x, y (целые числа, лежащие в диапазоне 1–8). Учитывая, что левое нижнее поле доски (1,1) является черным, проверить истинность высказывания: «Данное поле является белым».
##x = int(input("x = "))
##y = int(input("y = "))
##if 1<=x<=8 and 1<=y<=8:
##    if x%2 = 1 and y%2 = 0 or x%2 = 1 and y%2 = 0:
##        print('True')
##    else:
##       print('False')
##else:
##    print('False')

##x = int(input("x = "))
##y = int(input("y = "))
##if 1<=x<=8 and 1<=y<=8:
##    res = x%2 == 1 and y%2 == 0 or x%2 == 1 and y%2 == 0
##    print(res)
##else:
##    print('Eto shahmati DAUN (8 na 8)')


###Boolean35◦. Даны координаты двух различных полей шахматной доски x1, y1, x2, y2 (целые числа, лежащие в диапазоне 1–8). Проверить истинность высказывания: «Данные поля имеют одинаковый цвет».
##x1 = int(input("x1 = "))
##y1 = int(input("y1 = "))
##x2 = int(input("x2 = "))
##y2 = int(input("y2 = "))
##if 1<=x1<=8 and 1<=y1<=8 and 1<=x2<=8 and 1<=y2<=8:
##    if x1%2 = 1 and y1%2 = 0 and x2%2 = 1 and y2%2 = 0 or x1%2 = 1 and y1%2 = 0 and x2%2 = 1 and y2%2 = 0:
##        print('True')
##    else:
##       print('False')
##else:
##    print('False')


##x1 = int(input("x1 = "))
##y1 = int(input("y1 = "))
##x2 = int(input("x2 = "))
##y2 = int(input("y2 = "))
##if 1<=x1<=8 and 1<=y1<=8 and 1<=x2<=8 and 1<=y2<=8:
##    res = x1%2 == 1 and y1%2 == 0 and x2%2 == 1 and y2%2 == 0 or x1%2 == 1 and y1%2 == 0 and x2%2 == 1 and y2%2 == 0
##    print(res)
##else:
##    print('Eto shahmati DAUN (8 na 8)')


#If1. Дано целое число. Если оно является положительным, то прибавить к нему 1; в противном случае не изменять его. Вывести полученное число
##A = int(input("A = "))
##if A>0:
##    A=A+1
##else:
##     print(A)


#If2. Дано целое число. Если оно является положительным, то прибавить к нему 1; в противном случае вычесть из него 2. Вывести полученное число.

##A = int(input("A = "))
##if A>0:
##    A=A+1
##else:
##    A=A-2
##print(A)


#Дaно целое число. Если оно является положительным, то прибавить к нему 1; если отрицательным, то вычесть из него 2; если нулевым, то заменить его на 10. Вывести полученное число.

##A = int(input("A = "))
##if A>0:
##    A=A+1
##if A<0:
##    A=A-2
##if A==0:
##    A=10
##print(A)


#If4◦Даны три целых числа. Найти количество положительных чисел в исходном наборе.
##A = int(input("A = "))
##B = int(input("B = "))
##C = int(input("C = "))
##k=0
##if A>0:
##    k=k+1
##if B>0:
##    k=k+1
##if C>0:
##    k=k+1
##print(k)


#If5. Даны три целых числа. Найти количество положительных и количество отрицательных чисел в исходном наборе
##A = int(input("A = "))
##B = int(input("B = "))
##C = int(input("C = "))
##k=0
##f=0
##if A>0:
##    k=k+1
##else:
##    f = f+1
##if B>0:
##    k=k+1
##else:
##    f = f+1
##if C>0:
##    k=k+1
##else:
##    f = f+1
##print(k)
##print(f)


#If6◦Даны два числа. Вывести большее из них.
##A = int(input("A = "))
##B = int(input("B = "))
##if A>B:
##    print(A)
##else:
##    print(B)


#If7. Даны два числа. Вывести порядковый номер меньшего из них.
##A = int(input("A = "))
##B = int(input("B = "))
##if A>B:
##    print("1")
##else:
##    print("2")


#If8◦Даны два числа. Вывести вначале большее, а затем меньшее из них
##A = int(input("A = "))
##B = int(input("B = "))
##if A>B:
##    print(A)
##    print(B)
##else:
##    print(B)
##    print(A)


#If9. Даны две переменные вещественного типа: A, B. Перераспределить значения данных переменных так, чтобы в A оказалось меньшее из значений,а в B — большее. Вывести новые значения переменных A и B.
##A = int(input("A = "))
##B = int(input("B = "))
##if A>B:
##    D=A
##    A=B
##    B=D
##print(A)
##print(B)
    

#If10. Даны две переменные целого типа: A и B. Если их значения не равны,то присвоить каждой переменной сумму этих значений, а если равны,то присвоить переменным нулевые значения. Вывести новые значения переменных A и B.
##A = int(input("A = "))
##B = int(input("B = "))
##if A != B:
##    k = A+B
##    A=k
##    B=k
##else:
##    A=0
##    B=0
##print(A)
##print(B)


#If11. Даны две переменные целого типа: A и B. Если их значения не равны, то присвоить каждой переменной большее из этих значений, а если равны,то присвоить переменным нулевые значения. Вывести новые значения переменных A и B.
##A = int(input("A = "))
##B = int(input("B = "))
##if A != B:
##    if A>B:
##        B=A
##    else:
##        A=B
##else:
##    A=0
##    B=0
##print(A)
##print(B)


#If12◦. Даны три числа. Найти наименьшее из них.
##A = int(input("A = "))
##B = int(input("B = "))
##C = int(input("C = "))
##if A<B and A<C:
##    print(A)
##elif B<A and B<C:
##    print(B)
##elif C<A and C<B:
##    print(C)
##elif A==B==C:
##    print(A)
##elif A==B<C:
##    print(A)
##elif A==C<B:
##    print(A)
##elif A==B>C:
##    print(C)
##elif A==C>B:
##    print(B)
##elif C==B<A:
##    print(C)
##elif C==B>A:
##    print(A)


#If13. Даны три числа. Найти среднее из них (то есть число, расположенное между наименьшим и наибольшим).
##A = int(input("A = "))
##B = int(input("B = "))
##C = int(input("C = "))
##if A>B>C or A<B<C:
##    print(B)
##elif B>A>C or B<A<C:
##    print(A)
##elif B>C>A or B<C<A:
##    print(C)
##else:
##    print('idi nah,tut net srednego')


#If14. Даны три числа. Вывести вначале наименьшее, а затем наибольшее из данных чисел.
#A = int(input("A = "))
#B = int(input("B = "))
#C = int(input("C = "))
#if A>B>C:
#    print(C)
#    print(A)
#elif A<B<C:
#    print(A)
#    print(C)
#elif B>A>C:
#    print(C)
#   print(B)
#elif B<A<C:
#    print(B)
#    print(C)
#elif B>C>A:
#    print(A)
#    print(B)
#elif B<C<A:
#    print(B)
#    print(A)


#If20. На числовой оси расположены три точки: A, B, C. Определить, какая из двух последних точек (B или C) расположена ближе к A, и вывести эту точку и ее расстояние от точки A.
##A = int(input("A = "))
##B = int(input("B = "))
##C = int(input("C = "))
##H = math.fabs(A-B)
##G = math.fabs(A-C)
##if H<G:
##    print(B)
##    print(H)
##elif G<H:
##    print(C)
##    print(G)
##else:
##    print('niht')


#If22◦Даны координаты точки, не лежащей на координатных осях OX и OY.Определить номер координатной четверти, в которой находится данная точка
##x = int(input("x = "))
##y = int(input("y = "))
##if x != 0 and y != 0:
##    if x>0 and y>0:
##        print('1')
##    elif x>0 and y<0:
##        print('4')
##    elif x<0 and y<0:
##        print('3')
##    elif x<0 and y>0:
##        print('2')
##else:
##    print('niht')


#If21. Даны целочисленные координаты точки на плоскости. Если точка совпадает с началом координат, то вывести 0. Если точка не совпадает с началом координат, но лежит на оси OX или OY, то вывести соответственно 1 или 2. Если точка не лежит на координатных осях, то вывести 3.
##x = int(input("x = "))
##y = int(input("y = "))
##if x == 0 and y == 0:
##    print('0')
##elif x == 0:
##    print('1')
##elif y == 0:
##    print('2')
##else:
##    print('3')


#If23. Даны целочисленные координаты трех вершин прямоугольника, стороны которого параллельны координатным осям. Найти координаты его четвертой вершины.

##x1 = int(input('x1= '))
##y1 = int(input('y1= '))
##x2 = int(input('x2= '))
##y2 = int(input('y2= '))
##x3 = int(input('x3= '))
##y3 = int(input('y3= '))
##if x1==x2:
##    x4 = x3
##elif x1==x3:
##    x4 = x2
##elif x2==x3:
##    x4 = x1
##if y1==y2:
##    y4=y3
##elif y1==y3:
##    y4=y2
##elif y2==y3:
##    y4=y1
##else:
##    print('niht')
##print(x4)
##print(y4)


#If24. Для данного вещественного x найти значение следующей функции f,принимающей вещественные значения:f (x) = 2·sin(x), если x > 0,  6 − x, если x ≤ 0.
##x = int(input("x = "))
##if x>0:
##    f = 2* math.sin(x)
##else:
##    f = 6-x
##print(f)


#If25. Для данного целого x найти значение следующей функции f, принимающей значения целого типа:f (x) = 2·x, если x < −2 или x > 2, −3·x, в противном случае.
##x = int(input("x = "))
##if x<-2 or x>2:
##    f = 2*x
##else:
##    f = -3*x
##print(f)


#If26◦Для данного вещественного x найти значение следующей функции f,принимающей вещественные значения:−x, если x ≤ 0, f (x) = x2, если 0 < x < 2, 4, если x ≥ 2.

##x = int(input("x = "))
##if x<=0:
##    f=-x
##elif 0 < x < 2:
##    f = x**2
##elif x>=2:
##    f = 4
##print(f)


#If27. Для данного вещественного x найти значение следующей функции f,принимающей значения целого типа:0, если x < 0,  f (x) = 1, если x принадлежит [0, 1), [2, 3), . . . , −1, если x принадлежит [1, 2), [3, 4), . . . .

##x = int(input("x = "))
##a=x%2
##if x<0:
##    f=0
##elif a==0:
##    f=1
##elif a==1:
##    f=-1
##print(f)


#If28. Дан номер года (положительное целое число). Определить количество дней в этом году, учитывая, что обычный год насчитывает 365 дней, а високосный — 366 дней. Високосным считается год, делящийся на 4,
#за исключением тех годов, которые делятся на 100 и не делятся на 400 (например, годы 300, 1300 и 1900 не являются високосными, а 1200 и 2000 — являются).
#x = int(input("x = "))
#if x>=0:
#    if x%4==0:
#        if x%100==0 and x%400 == 0:
#            print(366)
#        elif x%100 != 0:
#            print(366)
#        else:
#            print(365)
#    else:
#        print(365)
#else: print('x>=0')

#If29. Дано целое число. Вывести его строку-описание вида «отрицательное четное число», «нулевое число», «положительное нечетное число» и т. д.
#x = int(input("x = "))
#a = x%2
#if x==0:
#    print('нулевое число')
#elif x<0 and a==0:
#    print('отрицательное четное число')
#elif x<0 and a != 0:
#    print('отрицательное нечетное число')
#elif x>0 and a==0:
#    print('положительное четное число')
#elif x>0 and a != 0:
#    print('положительное нечетное число')


#If30. Дано целое число, лежащее в диапазоне 1–999. Вывести его строкуописание вида «четное двузначное число», «нечетное трехзначное число» и т. д
#x = int(input("x = "))
#a=x%2
#if 0<x<1000:
#    if a == 0:
#        if 0<x<10:
#            print('odnoznachnoe четное число')
#        elif 9<x<100:
#            print('четное двузначное число')
#        elif 99<x<1000:
#            print('четное трехзначное число')
#    elif a != 0:
#        if 0<x<10:
#            print('odnoznachnoe нечетное число')
#        elif 9<x<100:
#            print('нечетное двузначное число')
#        elif 99<x<1000:
#            print('нечетное трехзначное число')
#else:
#    print('0<x<1000')


#For1. Даны целые числа K и N (N > 0). Вывести N раз число K.
##K = int(input("K = "))
##N = int(input("N = "))
##i=1
##while i<=N:
##    print(K)
##    i=i+1


#For2. Даны два целых числа A и B (A < B). Вывести в порядке возрастания все целые числа, расположенные между A и B (включая сами числа A и B), а также количество N этих чисел.
##A = int(input("A = "))
##B = int(input("B = "))
##i = 0
##while A<=B:
##    print(A)
##    i=i+1
##    A=A+1
##print(i)


#For3. Даны два целых числа A и B (A < B). Вывести в порядке убывания все целые числа, расположенные между A и B (не включая числа A и B), а также количество N этих чисел.
##A = int(input("A = "))
##B = int(input("B = "))
##i = 0
##while A<B:
##    B=B-1
##    i=i+1
##    print(B)
##print(i)


#For4. Дано вещественное число — цена 1 кг конфет. Вывести стоимость 1,2, . . . , 10 кг конфет
##x = int(input("x = "))
##x1=x
##i=1
##while i<=10:
##    print(x1)
##    x1=x1+x
##    i=i+1


#For5◦. Дано вещественное число — цена 1 кг конфет. Вывести стоимость 0.1,0.2, . . . , 1 кг конфет.
##x = int(input("x = "))
##x=x/10
##x1=x
##i=0.1
##while i<=1:
##    print(x1)
##    x1=x1+x
##    i=i+0.1


#For6. Дано вещественное число — цена 1 кг конфет. Вывести стоимость 1.2,1.4, . . . , 2 кг конфет.
##x = int(input("x = "))
##x=x/5
##x1=x*6
##i=1.2
##while i<=2:
##    print(x1)
##    x1=x1+x
##    i=i+0.2


#For7. Даны два целых числа A и B (A < B). Найти сумму всех целых чисел от A до B включительно.
##A = int(input("A = "))
##B = int(input("B = "))
##i=0
##while A<B:
##    i=i+A+1
##    A=A+1
##print(i)


#For8. Даны два целых числа A и B (A < B). Найти произведение всех целых чисел от A до B включительно.
##A = int(input("A = "))
##B = int(input("B = "))
##i=1
##while A<B:
##    i=i*A
##    A=A+1
##print(i)


#For9. Даны два целых числа A и B (A < B). Найти сумму квадратов всех целых чисел от A до B включительно.
##A = int(input("A = "))
##B = int(input("B = "))
##i=0
##while A<=B:
##    i=i+A**2
##    A=A+1
##print(i)


#For10. Дано целое число N (> 0). Найти сумму 1 + 1/2 + 1/3 + . . . + 1/N
##N = int(input("N = "))
##i=1
##h=0
##while i<=N:
##    h=h+1/i
##    i=i+1
##print(h)


#For11. Дано целое число N (> 0). Найти сумму N2 + (N + 1)2 + (N + 2)2 + . . . + (2·N)2
##N = int(input("N = "))
##i=0
##h=0
##while h<=N:
##    i=i+(N+h)**2
##    h=h+1
##print(i)


#For12◦. Дано целое число N (> 0). Найти произведение 1.1 · 1.2 · 1.3 · . . .(N сомножителей).

##N = int(input("N = "))
##i=1
##h=1
##g=0
##while g<=N:
##    i=i*h
##    h=h+0.1
##    g=g+1
##print(i)


#Series1◦. Даны десять вещественных чисел. Найти их сумму.
##s=0
##for i in range(10):
##    x = float(input("x = "))
##    s=s+x
##print(s)


#Series2. Даны десять вещественных чисел. Найти их произведение.

##s=1
##for i in range(10):
##    x = float(input("x = "))
##    s=s*x
##print(s)


#Series3. Даны десять вещественных чисел. Найти их среднее арифметическое.
##s=0
##for i in range(10):
##    x = float(input("x = "))
##    s=s+x
##s=s / 10
##print(s)


#Series4. Дано целое число N и набор из N вещественных чисел. Вывести сумму и произведение чисел из данного набора.
##s=0
##h=1
##N = int(input("N = "))
##for i in range(N):
##    x = float(input("x = "))
##    s=s+x
##    h=h*x
##print(s)
##print(h)


#Series5. Дано целое число N и набор из N положительных вещественных чисел. Вывести в том же порядке целые части всех чисел из данного набора (как вещественные числа с нулевой дробной частью), а также сумму всех целых частей.
##s=0
##N = int(input("N = "))
##for i in range(N):
##    x = float(input("x = "))
##    x=iut(x)
##    s=s+x
##    print(x)
##print(s)


#Series6. Дано целое число N и набор из N положительных вещественных чисел. Вывести в том же порядке дробные части всех чисел из данного набора (как вещественные числа с нулевой целой частью), а также произведение всех дробных частей.

##s=1
##N = int(input("N = "))
##for i in range(N):
##    x = float(input("x = "))
##    x=x%1
##    s=s*x
##    print(x)
##print(s)


#Series7. Дано целое число N и набор из N вещественных чисел. Вывести в том же порядке округленные значения всех чисел из данного набора (как целые числа), а также сумму всех округленных значений
##s=1
##N = int(input("N = "))
##for i in range(N):
##    x = float(input("x = "))
##    x=round(x)
##    s=s+x
##    print(x)
##print(s)


#Series8. Дано целое число N и набор из N целых чисел. Вывести в том же порядке все четные числа из данного набора и количество K таких чисел.
##s=0
##N = int(input("N = "))
##for i in range(N):
##    x = float(input("x = "))
##    if x%2==0:
##        s=s+1
##        print(x)
##    else:
##        print('xyi')
##print(s)


#Series9. Дано целое число N и набор из N целых чисел. Вывести в том же порядке номера всех нечетных чисел из данного набора и количество K таких чисел.
##s=0
##g=0
##N = int(input("N = "))
##for i in range(N):
##    x = float(input("x = "))
##    g=g+1
##    if x%2 != 0:
##        s=s+1
##        print(x)
##        print(g)
##    else:
##        print('xyi')
##print(s)


#Series10. Дано целое число N и набор из N целых чисел. Если в наборе имеются положительные числа, то вывести TRUE; в противном случае вывести FALSE.

##N = int(input("N = "))
##s=0
##for i in range(N):
##    x = float(input("x = "))
##    if x>0:
##        s=s+1
##    else:
##        print('')
##if s>0:
##    print('True')
##else:
##    print('FALSE')


#Series11. Даны целые числа K, N и набор из N целых чисел. Если в наборе имеются числа, меньшие K, то вывести TRUE; в противном случае вывести FALSE.
##N = int(input("N = "))
##s=0
##K = int(input("K = "))
##for i in range(N):
##    x = float(input("x = "))
##    if x>K:
##        s=s+1
##    else:
##        print('')
##if s>0:
##    print('True')
##else:
##    print('FALSE')


#Series12. Дан набор ненулевых целых чисел; признак его завершения — число 0. Вывести количество чисел в наборе.

##x = int(input("x = "))
##s=0
##while x != 0:
##    x = float(input("x = "))
##    s=s+1
##print(s)


#Series13. Дан набор ненулевых целых чисел; признак его завершения — число 0. Вывести сумму всех положительных четных чисел из данного набора. Если требуемые числа в наборе отсутствуют, то вывести 0.
##x = int(input("x = "))
##s=0
##while x != 0:
##    x = float(input("x = "))
##    if x>0 and x%2==0:
##        s=s+x
##print(s)


#Series14. Дано целое число K и набор ненулевых целых чисел; признак его завершения — число 0. Вывести количество чисел в наборе, меньших K
##x = int(input("x = "))
##K = int(input("K = "))
##s=0
##while x != 0:
##    x = float(input("x = "))
##    if x<K:
##        s=s+1
##print(s)


#Series15◦. Дано целое число K и набор ненулевых целых чисел; признак его завершения — число 0. Вывести номер первого числа в наборе, большего K. Если таких чисел нет, то вывести 0.

##x = int(input("x = "))
##K = int(input("K = "))
##s=0
##while x != 0:
##    x = float(input("x = "))
##    s=s+1
##    if x>K:
##        x=0
##        print(s)


#Series16◦. Дано целое число K и набор ненулевых целых чисел; признак его завершения — число 0. Вывести номер последнего числа в наборе,большего K. Если таких чисел нет, то вывести 0.

##x = int(input("x = "))
##K = int(input("K = "))
##s=0
##while x != 0:
##    x = float(input("x = "))
##    s=s+1
##    if x>K:
##        s1=s
##print(s1)


#1
##x = int(input("x = "))
##n = int(input("n = "))
##k = int(input("k = "))
##for i in range(x):
##    for j in range(n):
##        print(k,end=" ")
##    print()


#2.1
##x = int(input("x = "))
##k = int(input("k = "))
##for i in range(x):
##    for j in range(i+1):
##        print(k,end=" ")
##    print()


#2.2
##x = int(input("x = "))
##b=x-1
##k = int(input("k = "))
##for i in range(x):
##    for j in range(b-i):
##        print(k,end=" ")
##    print()


#3
##x = int(input("x = "))
##b=x-1
##k = int(input("k = "))
##for i in range(x):
##    for j in range(b-i):
##        print(" ",end="")
##    for h in range(2*i+1):
##        print(k,end="")
##    print()



#x = int(input("x = "))
#h = int(input("h = "))
#k = int(input("k = "))
#for i in range(x):



#1 spisok
#marks = []
#marksQty = int(input())
#for i in range(marksQty):
#    mark = int(input())
#    marks.append(mark)
#print(marks)


#2
##lst = []
##for i in range(1,11):
##    lst.append(i)
##print(lst)


##3
##lst = []
##for i in range(10,0,-1):
##    lst.append(i)
##print(lst)


#4
##d=0
##lst = []
##for i in range(1,11):
##    d=d+2
##    lst.append(d)
##print(lst)


##lst = []
##for i in range(1,11):
##    lst.append(i+2)
##print(lst)


#Array1. Дано целое число N (>0). Сформировать и вывести целочисленный массив размера N, содержащий N первых положительных нечетных чисел: 1, 3, 5, . . . .
#d=1
#lst = []
#Qty = int(input())
#for i in range(Qty):
#    lst.append(d)
#    d=d+2
#print(lst)


#Array2. Дано целое число N (>0). Сформировать и вывести целочисленный массив размера N, содержащий степени двойки от первой до N-й: 2, 4, 8, 16, . . . .
#d=2
#lst = []
#Qty = int(input())
#for i in range(Qty):
#    lst.append(d)
#    d=d*2
#print(lst)


#Array3. Дано целое число N (> 1), а также первый член A и разность D арифметической прогрессии. Сформировать и вывести массив размера N, содержащий N первых членов данной прогрессии:A, A+D, A+2·D, A+3·D, ....
#d=int(input())
#a = int(input())
#g=a
#j=1
#lst = []
#Qty = int(input())
#for i in range(Qty):
#    lst.append(g)
#    g = a+d*j
#    j=j+1
#print(lst)


#Array4. Дано целое число N (>1), а также первый член A и знаменатель D геометрической прогрессии. Сформировать и вывести массив размера N, содержащий N первых членов данной прогрессии:A, A·D, A·D2, A·D3, . . . .
#d=int(input())
#a = int(input())
#g=a
#j=1
#lst = []
#Qty = int(input())
#for i in range(Qty):
#    lst.append(g)
#    g = a*(d*j)
#    j=j+1
#print(lst)


#Array5. Дано целое число N (>2). Сформировать и вывести целочисленный массив размера N, содержащий N первых элементов последовательности чисел Фибоначчи FK: F1 =1, F2 =1, FK =FK−2 +FK−1, K =3,4,....

#lst = [0, 1]
#Qty = int(input())
#for i in range(2,Qty):
#    g = lst[-1] + lst[-2]
#    lst.append(g)
#print(lst)


#Array6. Даны целые числа N (>2), A и B. Сформировать и вывести цело- численный массив размера N, первый элемент которого равен A, второй равен B, а каждый последующий элемент равен сумме всех предыдущих.
#a = int(input())
#b = int(input())
#lst = [a, b]
#Qty = int(input())
#for i in range(2,Qty):
#    g = sum(lst)
#    lst.append(g)
#print(lst)


#Array7◦. Дан массив размера N. Вывести его элементы в обратном порядке.
#lst = []
#Qty = int(input())
#for i in range(Qty,0,-1):
#    lst.append(i)
#print(lst)


#Array8. Дан целочисленный массив размера N. Вывести все содержащиеся в данном массиве нечетные числа в порядке возрастания их индексов, а также их количество K.

#lst = []
#Qty = int(input())
#for i in range(1,Qty+1):
#    lst.append(i)
    
#K = len()
#print()
#print(K)

from random import randint

#1 Вывести из списка только отрицательные числа
#lst = []
#for i in range(15):
#    lst.append(randint(-100,100))
#for num in lst:
#    if num<0:
#        print(num)


#2 Подсчитать количество положительных чисел
#h = []
#lst = []
#for i in range(15):
#    lst.append(randint(-100,100))
#for num in lst:
#    if num>0:
#        h.append(num)
#k = len(h)
#print(k)  


#3 Найти сумму четных чисел
#lst = []
#k=0
#for i in range(15):
#    lst.append(randint(-100,100))
#for num in lst:
#    if num%2==0:
#        k=k+num
#print(k)


#4 Найти произведение нечетных чисел
#lst = []
#k=1
#for i in range(15):
#    lst.append(randint(-100,100))
#for num in lst:
#    if num%2 != 0:
#        k=k*num
#print(k)


#5 Найти среднее арифметическое чисел, которые делятся на 5 и не делятся на 7
#lst = []
#k=[]
#for i in range(15):
#    lst.append(randint(-100,100))
#for num in lst:
#    if num%5 == 0 and num%7 != 0:
#        k.append(num)
#t = len(k)
#h = sum(k)
#if t>0:
#    g= h/t
#    print(g)
#else:
#    print("net takih chisel")


#Array18. Дан массив A ненулевых целых чисел размера 10. Вывести значение первого из тех его элементов AK, которые удовлетворяют неравенству AK < A10. Если таких элементов нет, то вывести 0.
#lst = []
#for i in range(10):
#    lst.append(randint(-100,100))
#for num in lst:
#    if num < lst[-1]:
#        print(num)
#        break
#    else:
#        print(0)


#Array19. Дан целочисленный массив A размера 10. Вывести порядковый номер последнего из тех его элементов AK, которые удовлетворяют двойному неравенству A1 < AK < A10. Если таких элементов нет, то вывести 0.
#lst = []
#k = None
#for i in range(10):
#    lst.append(randint(-100,100))
#for num in lst:
#    if lst[0] < num < lst[9]:
#        print(num)
#        k=num
#        break
#if k==None:
#    print(0)


#Array20.ДанмассивразмераN ицелыечислаK иL(1≤K ≤L≤N).Найти сумму элементов массива с номерами от K до L включительно.
#print("1 <= K <= L <= N")
#N = int(input("N= "))
#K = int(input("K= "))
#L = int(input("L= "))
#lst = []
#for i in range(N):
#    lst.append(randint(-100,100))
#if 1 <= K <= L <= N:
#    g = sum(lst[K-1:L])
#    print(g)
#else:
#    print("net")


#Array21. Дан массив размера N и целые числа K и L (1 ≤ K ≤ L ≤ N). Найти среднее арифметическое элементов массива с номерами от K до L включительно.
#print("1 <= K <= L <= N")
#N = int(input("N= "))
#K = int(input("K= "))
#L = int(input("L= "))
#lst = []
#for i in range(N):
#    lst.append(randint(-100,100))
#if 1 <= K <= L <= N:
#    g = sum(lst[K-1:L])
#    h = len(lst[K-1:L])
#    j = g/h
#    print(j)
#else:
#    print("net")



#Array22. Дан массив размера N и целые числа K и L (1 < K ≤ L ≤ N). Найти сумму всех элементов массива, кроме элементов с номерами от K до L включительно.
#print("1 <= K <= L <= N")
#N = int(input("N= "))
#K = int(input("K= "))
#L = int(input("L= "))
#lst = []
#for i in range(N):
#    lst.append(randint(-100,100))
#print(lst)
#if 1 <= K <= L <= N:
#    lst[K-1:L]=[]
#    g = sum(lst)
#    print(g)
#else:
#    print("net")


#Array23. Дан массив размера N и целые числа K и L (1 < K ≤ L ≤ N). Найти среднее арифметическое всех элементов массива, кроме элементов с номерами от K до L включительно.
#print("1 <= K <= L <= N")
#N = int(input("N= "))
#K = int(input("K= "))
#L = int(input("L= "))
#lst = []
#for i in range(N):
#    lst.append(randint(-100,100))
#print(lst)
#if 1 <= K <= L <= N:
#    lst[K-1:L]=[]
#    g = sum(lst)
#    h = len(lst)
#    j = g/h
#    print(j)
#else:
#    print("net")




#slovar
#dict = {"Лев Толстой" : "Вoйна и мир",
#        "Михаил Лермонтов" : "Молитва"}
#ltBook = dict.get("Лев Толстой", "net takova avtora")
#dict["Pushkin"] = "Skazka o care Saltane"
#print(dict)


#2 functia
def sum(x, y):
    res = x + y
    return res

#r = sum(2, 5)
#print(r)

#a = int(input("a = "))
#b = int(input("b = "))
#r = sum(a, b)
#print(r)


#proc1
def a3(a):
    return a*a*a

#for i in range(5):
#    r = randint(1, 10)
#    print(r,"^3=", a3(r))


#Proc2. Описать 2 функции PowerA2(А), PowerA4(A), вычисляющие вторую и четвертую степень числа A и возвращающие эти степени (параметры являются вещественными). С помощью этих функций найти вторую и четвертую степень пяти случайных чисел
def a2(a):
    return a*a

def a4(a):
    return a*a*a*a

#for i in range(5):
#    r = randint(1, 10)
#    print(r,"^2=", a2(r))
#    print(r,"^4=", a4(r))


#Proc3. Описать 2 функции aMean(X, Y), gMean(X,Y), вычисляющие среднее арифметическое aMean = (X+Y)/2 и среднее геометрическое gMean = √ X·Y двух положительных чисел X и Y (X и Y — входные параметры вещественного типа). С помощью этих функций найти среднее арифметическое и среднее геометрическое для 10 пар случайных чисел.
def aMean(a, b):
    return (a+b)/2

def gMean(a, b):
    return math.sqrt(a*b)

#for i in range(10):
#    a = randint(1, 10)
#    b = randint(1, 10)
#    print(a, b, " среднее арифметическое = ", aMean(a, b))
#    print(a, b, " среднее геометрическое = ", gMean(a, b))


#Proc4. Описать 2 функции triangleP(a) и triangleS(a), вычисляющие по стороне a равностороннего треугольника его периметр P = 3·a и площадь a23/4 (параметры являются вещественными). С помощью этих функций найти периметры и площади трех равносторонних треугольников с данными сторонами (стороны ввести с клавиатуры).
def triangleP(a):
    return 3*a


def triangleS(a):
    return a*a*math.sqrt(3/4)

#a = int(input("a = "))
#print(a, " P = ", triangleP(a))
#print(a, " S = ", triangleS(a))


#Proc5. Описать 2 функции rectP(x1, y1, x2, y2) и rectS(x1, y1, x2, y2), вычисляющие периметр P и площадь S прямоугольника со сторонами, параллельными осям координат, по координатам (x1, y1), (x2, y2) его противоположных вершин. С помощью этих функций найти периметры и площади трех прямоугольников с данными противоположными вершинами.
def rectP(x1, y1, x2, y2):
    return 



#Proc19. Описать функцию RingS(R1, R2) вещественного типа, находящую площадь кольца, заключенного между двумя окружностями с общим центром и радиусами R1 и R2 (R1 и R2 — вещественные, R1 > R2). С ее помощью найти площади трех колец, для которых даны внешние и внутренние ра- диусы. Воспользоваться формулой площади круга радиуса R: S = π·R2. В качестве значения π использовать 3.14.
def RingS(R1, R2):
    if R1>R2:
        return 3.14*(R1*R1 - R2*R2)

#k = int(input("k = "))
#for i in range(k):
#    R1 = int(input("R1 = "))
#    R2 = int(input("R2 = "))
#    print(R1,R2,"S = ",RingS(R1, R2) )





#Proc20. Описать функцию TriangleP(a, h), находящую периметр равнобед- ренного треугольника по его основанию a и высоте h, проведенной к основанию (a и h — вещественные). С помощью этой функции найти периметры трех треугольников, для которых даны основания и высоты. Для нахождения боковой стороны b треугольника использовать теорему Пифагора:b2 = (a/2)2 + h2.
def TriangleP(a, h):
    b = math.sqrt((a/2)**2 + h*h)
    P = a + b*2
    return P

#k = int(input("k = "))
#for i in range(k):
#    a = int(input("a = "))
#    h = int(input("h = "))
#    print(TriangleP(a, h))


#Proc21◦. Описать функцию SumRange(A, B) целого типа, находящую сумму всех целых чисел от A до B включительно (A и B — целые). Если A > B,то функция возвращает 0. С помощью этой функции найти суммы чисел от A до B и от B до C, если даны числа A, B, C.
def SumRange(a, b):
    g = 0
    while a<=b:
        g=g+a
        a=a+1
    return g
    if a>b:
        print(0)


#a = int(input("a = "))
#b = int(input("b = "))
#c = int(input("c = "))
#print(SumRange(a, b))
#print(SumRange(b, c))


#Proc22. Описать функцию Calc(A, B, Op) вещественного типа, выполняющую над ненулевыми вещественными числами A и B одну из арифметических операций и возвращающую ее результат. Вид операции определяется це- лым параметром Op: 1 — вычитание, 2 — умножение, 3 — деление, осталь- ные значения — сложение. С помощью Calc выполнить для данных A и B операции, определяемые данными целыми N1, N2, N3
def Calc(a, b, k):
    if k == 1:
        g = a-b
    elif k == 2:
        g = a*b
    elif k == 3:
        g = a/b
    else:
        g = a+b
    return g
    
#a = int(input("a = "))
#b = int(input("b = "))
#k = int(input("k = "))
#print(Calc(a, b, k))


#Proc23. Описать функцию Quarter(x, y) целого типа, определяющую номер координатной четверти, в которой находится точка с ненулевыми веще- ственными координатами (x, y). С помощью этой функции найти номера координатных четвертей для трех точек с данными ненулевыми коорди- натами.
def Quarter(x, y):
    if x>0 and y>0:
        g = 1
    elif x>0 and y<0:
        g = 4
    elif x<0 and y>0:
        g = 2
    elif x<0 and y<0:
        g = 3
    return g

#k = int(input("k = "))
#for i in range(k):
#    x = int(input("x = "))
#    y = int(input("y = "))
#    print(Quarter(x, y))


#Proc24. Описать функцию Even(K) логического типа, возвращающую TRUE, если целый параметр K является четным, и FALSE в противном случае. С ее помощью найти количество четных чисел в наборе из 10 целых чисел.
def Even(K):
    res = K%2==0
    return res

#lst=[]
#for i in range(15):
#    lst.append(randint(-100,100))
#for num in lst:
#    if Even(num)==True:
#        print(num)


#Proc25◦. Описать функцию IsSquare(K) логического типа, возвращающую TRUE, если целый параметр K (>0) является квадратом некоторого це- лого числа, и FALSE в противном случае. С ее помощью найти количество квадратов в наборе из 10 целых положительных чисел.
def IsSquare(K):
    if K>0:
        res = math.sqrt(K)%1==0
        return res

#k=0
#lst=[]
#for i in range(15):
    #lst.append(randint(1,100))
#for num in lst:
#    if IsSquare(num)==True:
#        k=k+1
#        print(num)
#print("k = ",k)


#Proc26. Описать функцию IsPower5(K) логического типа, возвращающую TRUE, если целый параметр K (> 0) является степенью числа 5, и FALSE в противном случае. С ее помощью найти количество степеней числа 5 в наборе из 10 целых положительных чисел.
def IsPower5(K):
    h=1
    if K>0:
        while h<=K:
            h=h*5
        res = h==K
        return res

x = int(input("x = "))
print(IsPower5(x))

#g=0
#lst=[]
#for i in range(15):
#    lst.append(randint(1,100))
#for num in lst:
#    if IsPower5(num)==True:
#        print(num)
#        g=g+1
#print(g)







