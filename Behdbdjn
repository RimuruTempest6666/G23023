import pygame
import sys
import random

# Settings
FPS = 60
SC_WIDTH = 640
SC_HEIGHT = 480
GRID_SIZE = 20
PACMAN_SPEED = 3
GHOST_SPEED = 2
BG_COLOR = (0, 0, 0)
PACMAN_COLOR = (255, 255, 0)
BLINKY_COLOR = (255, 0, 0)
PINKY_COLOR = (255, 182, 193)
INKY_COLOR = (0, 255, 255)
CLYDE_COLOR = (255, 165, 0)
PELLET_COLOR = (255, 255, 255)
POWER_PELLET_COLOR = (0, 255, 0)
WALL_COLOR = (0, 0, 255)

# Initialize pygame
pygame.init()
screen = pygame.display.set_mode((SC_WIDTH, SC_HEIGHT))
clock = pygame.time.Clock()

# Define Pac-Man class
class Pacman(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = pygame.Surface((GRID_SIZE, GRID_SIZE))
        self.image.fill(PACMAN_COLOR)
        self.rect = self.image.get_rect()
        self.rect.topleft = (x, y)
        self.speed = PACMAN_SPEED
        self.direction = pygame.Vector2(0, 0)

    def update(self):
        self.rect.move_ip(self.direction * self.speed)

        # Ensure Pac-Man stays within screen bounds
        if self.rect.left < 0:
            self.rect.left = 0
        if self.rect.right > SC_WIDTH:
            self.rect.right = SC_WIDTH
        if self.rect.top < 0:
            self.rect.top = 0
        if self.rect.bottom > SC_HEIGHT:
            self.rect.bottom = SC_HEIGHT

    def draw(self, screen):
        screen.blit(self.image, self.rect)

# Define Ghost class
class Ghost(pygame.sprite.Sprite):
    def __init__(self, x, y, color):
        super().__init__()
        self.image = pygame.Surface((GRID_SIZE, GRID_SIZE))
        self.image.fill(color)
        self.rect = self.image.get_rect()
        self.rect.topleft = (x, y)
        self.speed = GHOST_SPEED
        self.direction = pygame.Vector2(random.choice([1, -1]), random.choice([1, -1]))

    def update(self):
        self.rect.move_ip(self.direction * self.speed)

        # Change direction upon hitting screen bounds
        if self.rect.left < 0 or self.rect.right > SC_WIDTH:
            self.direction.x *= -1
        if self.rect.top < 0 or self.rect.bottom > SC_HEIGHT:
            self.direction.y *= -1

    def draw(self, screen):
        screen.blit(self.image, self.rect)

# Define Pellet class
class Pellet(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = pygame.Surface((GRID_SIZE // 2, GRID_SIZE // 2))
        self.image.fill(PELLET_COLOR)
        self.rect = self.image.get_rect()
        self.rect.center = (x, y)

    def draw(self, screen):
        screen.blit(self.image, self.rect)

# Define Power Pellet class
class PowerPellet(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = pygame.Surface((GRID_SIZE, GRID_SIZE))
        self.image.fill(POWER_PELLET_COLOR)
        self.rect = self.image.get_rect()
        self.rect.center = (x, y)

    def draw(self, screen):
        screen.blit(self.image, self.rect)

# Define Wall class
class Wall(pygame.sprite.Sprite):
    def __init__(self, x, y, width, height):
        super().__init__()
        self.image = pygame.Surface((width, height))
        self.image.fill(WALL_COLOR)
        self.rect = self.image.get_rect()
        self.rect.topleft = (x, y)

    def draw(self, screen):
        screen.blit(self.image, self.rect)

# Create maze
def create_maze():
    walls = pygame.sprite.Group()
    # Add outer walls
    walls.add(Wall(0, 0, SC_WIDTH, GRID_SIZE))  # Top wall
    walls.add(Wall(0, 0, GRID_SIZE, SC_HEIGHT))  # Left wall
    walls.add(Wall(0, SC_HEIGHT - GRID_SIZE, SC_WIDTH, GRID_SIZE))  # Bottom wall
    walls.add(Wall(SC_WIDTH - GRID_SIZE, 0, GRID_SIZE, SC_HEIGHT))  # Right wall
    return walls

# Create food
def create_food():
    foods = pygame.sprite.Group()
    for i in range(10):
        x = random.randint(0, SC_WIDTH - GRID_SIZE)
        y = random.randint(0, SC_HEIGHT - GRID_SIZE)
        foods.add(Pellet(x, y))
    return foods

# Create power pellets
def create_power_pellets():
    power_pellets = pygame.sprite.Group()
    power_pellets.add(PowerPellet(GRID_SIZE, GRID_SIZE))
    power_pellets.add(PowerPellet(SC_WIDTH - 2 * GRID_SIZE, GRID_SIZE))
    power_pellets.add(PowerPellet(GRID_SIZE, SC_HEIGHT - 2 * GRID_SIZE))
    power_pellets.add(PowerPellet(SC_WIDTH - 2 * GRID_SIZE, SC_HEIGHT - 2 * GRID_SIZE))
    return power_pellets

# Initialize game objects
pacman = Pacman(SC_WIDTH // 2, SC_HEIGHT // 2)
blinky = Ghost(100, 100, BLINKY_COLOR)
pinky = Ghost(300, 200, PINKY_COLOR)
inky = Ghost(500, 300, INKY_COLOR)
clyde = Ghost(400, 400, CLYDE_COLOR)

all_sprites = pygame.sprite.Group()
all_sprites.add(pacman, blinky, pinky, inky, clyde)
foods = create_food()
power_pellets = create_power_pellets()
walls = create_maze()

# Main game loop
running = True
score = 0

while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT:
                pacman.direction = pygame.Vector2(-1, 0)
            elif event.key == pygame.K_RIGHT:
                pacman.direction = pygame.Vector2(1, 0)
            elif event.key == pygame.K_UP:
                pacman.direction = pygame.Vector2(0, -1)
            elif event.key == pygame.K_DOWN:
                pacman.direction = pygame.Vector2(0, 1)

    # Update game objects
    all_sprites.update()

    # Check collisions with food
    food_collisions = pygame.sprite.spritecollide(pacman, foods, True)
    score += len(food_collisions) * 10

    # Check collisions with power pellets
    power_pellet_collisions = pygame.sprite.spritecollide(pacman, power_pellets, True)
    if power_pellet_collisions:
        print("Power Pellet eaten!")

    # Check collisions with ghosts
    if pygame.sprite.spritecollideany(pacman, [blinky, pinky, inky, clyde]):
        print("Game Over!")
        running = False

    # Check if all food is eaten
    if not foods:
        print("You win!")
        running = False

    # Draw everything
    screen.fill(BG_COLOR)
    for sprite in all_sprites:
        sprite.draw(screen)
    for food in foods:
        food.draw(screen)
    for pellet in power_pellets:
        pellet.draw(screen)
    for wall in walls:
        wall.draw(screen)
    pygame.display.flip()

    # Cap the frame rate
    clock.tick(FPS)

pygame.quit()
sys.exit()
